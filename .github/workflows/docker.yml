---
name: Create and publish a Docker image

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker:
    uses: ffbuilds/.github/.github/workflows/docker.yml@main
    secrets:
      APP_ID: ${{ secrets.APP_ID }}
      APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

  build-and-push-lambda-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        # bump: alpine /- ([\d.]+) # stable/ docker:alpine|^3
        # bump: alpine link "Release notes" https://alpinelinux.org/posts/Alpine-$LATEST-released.html
        alpine_version:
          - 3.18.4 # stable

    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@v1
        id: generate-token
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v3.3.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ steps.generate-token.outputs.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-lambda

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            ALPINE_VERSION=${{ matrix.alpine_version }}
            EXTRA_CONFIG_OPTS=--disable-protocols --enable-protocol=file
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=lambda
          cache-to: type=gha,mode=max,scope=lambda
